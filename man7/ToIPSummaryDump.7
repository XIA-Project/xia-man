.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/analysis/toipsumdump.hh:11'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "TOIPSUMMARYDUMP" 7click "12/Oct/2017" "Click"
.SH "NAME"
ToIPSummaryDump \- Click element;
writes packet summary information to an ASCII file
.SH "SYNOPSIS"
\fBToIPSummaryDump\fR(FILENAME [, \fIkeywords\fR])

\fBPorts\fR: 1 input, at most 1 output
.br
\fBDrivers\fR: userlevel
.br
.SH "DESCRIPTION"
Writes summary information about incoming packets to FILENAME in a simple
ASCII format---each line corresponds to a packet.  The FIELDS keyword
argument determines what information is written.  Writes to standard output if
FILENAME is a single dash `\f(CW-\fR'.  The BINARY keyword argument writes a packed
binary format to save space.
.PP
\fBToIPSummaryDump\fR uses packets' extra-length and extra-packet-count annotations.
.PP
\fBToIPSummaryDump\fR can optionally be used as a filter: it pushes received packets
to its output if that output exists.
.PP
Keyword arguments are:
.PP


.IP "FIELDS" 8
Space-separated list of field names. Each line of the summary dump will
contain those fields. Valid field names, with examples, are:
.IP "" 8
.nf
\&   timestamp    Packet timestamp: '996033261.451094' (either
\&                microsecond or nanosecond precision, depending
\&                on how Click was compiled)
\&   ts_sec       Seconds portion of timestamp: '996033261'
\&   ts_usec      Microseconds portion of timestamp: '451094'
\&   ts_usec1     Packet timestamp in microseconds
\&                (ts_sec*1e6 + ts_usec): '996033261451094'
\&   ip_src       IP source address: '192.150.187.37'
\&   ip_dst       IP destination address: '192.168.1.100'
\&   ip_frag      IP fragment: 'F' (1st frag), 'f' (2nd or
\&                later frag), '!' (nonfrag with DF), or
\&                '.' (normal nonfrag)
\&   ip_fragoff   IP fragmentation offset: '0', '0+', '0!'
\&                ('+' adds MF, '!' adds DF; offset in bytes)
\&   ip_len       IP length: '132'
\&   ip_proto     IP protocol: '10', or 'I' for ICMP, 'T' for
\&                TCP, 'U' for UDP
\&   ip_hl        IP header length in bytes: '20'
\&   ip_id        IP ID: '48759'
\&   ip_tos       IP type of service: '29'
\&   ip_dscp      IP Differentiated Services code point: '29'
\&   ip_ecn       IP ECN capability: 'no', 'ect1', 'ect2', 'ce'
\&   ip_ttl       IP time-to-live: '254'
\&   ip_sum       IP checksum: '43812'
\&   ip_opt       IP options (see below)
\&   sport        TCP/UDP source port: '22'
\&   dport        TCP/UDP destination port: '2943'
\&   tcp_seq      TCP sequence number: '93167339'
\&   tcp_ack      TCP acknowledgement number: '93178192'
\&   tcp_off      TCP offset in bytes: '20'
\&   tcp_flags    TCP flags: 'SA', '.'
\&   tcp_opt      TCP options (see below)
\&   tcp_ntopt    TCP options except NOP, EOL and timestamp
\&                (see below)
\&   tcp_sack     TCP SACK options (see below)
\&   tcp_window   TCP receive window: '480'
\&   tcp_urp      TCP urgent pointer: '0'
\&   udp_len      UDP length: '34'
\&   icmp_type    ICMP type: '0'
\&   icmp_code    ICMP code: '2'
\&   icmp_type_name  ICMP type, named if available: 'echo',
\&                '200'
\&   icmp_code_name  ICMP code, named if available:
\&                'sourcequench', '0'
\&   icmp_flowid  ICMP flow identifier, in network order: '256'
\&   icmp_seq     ICMP sequence number, in network order: '0'
\&   icmp_nextmtu  ICMP next-hop MTU (unreach.needfrag only):
\&                '256'
\&   payload      Payload (not including IP/TCP/UDP headers,
\&                for this fragment), in a string
\&   payload_len  Payload length: '34'
\&   payload_md5  Payload MD5 checksum (in ASCII output,
\&                expressed using 22 chars from [A-Za-z0-9_@])
\&   payload_md5_hex  Payload MD5 checksum (in ASCII output,
\&                expressed using 32 hexadecimal digits)
\&   ip_capture_len  Portion of IP length that contains
\&                actual packet data (as opposed to the extra
\&                length annotation): '34'
\&   count        Number of packets: '1'
\&   direction    Link number (PAINT_ANNO): '2', or '>'/'L'
\&                for paint 0, '<'/'R'/'X' for paint 1
\&   link, paint  Like 'direction', but always numeric
\&   aggregate    Aggregate number (AGGREGATE_ANNO): '973'
\&   first_timestamp   Packet "first timestamp" (FIRST_
\&                TIMESTAMP_ANNO): '996033261.451094'
\&   eth_src      Ethernet source: '00-0A-95-A6-D9-BC'
\&   eth_dst      Ethernet source: '00-0A-95-A6-D9-BC'
\&   wire_len     Packet wire length: '54'
.fi
.IP "" 8
If a field does not apply to a particular packet -- for example, '\f(CWsport\fR' on
an ICMP packet -- \fBToIPSummaryDump\fR prints a single dash for that value.
.IP "" 8
Default FIELDS is 'ip_src ip_dst'. You may also use spaces instead of
underscores, in which case you must quote field names that contain a space --
for example, '\f(CWip_src ip_dst "tcp seq"\fR'.
.IP "" 8

.IP "HEADER" 8
Boolean. If true, then print any '\f(CW!\fR' header lines at the beginning
of the dump to describe the dump format. Default is true.
.IP "" 8
.IP "VERBOSE" 8
Boolean. If true, then print out a couple comments at the beginning of the
dump describing the hostname and starting time, in addition to the '\f(CW!data\fR'
line describing the dumped fields. Ignored if HEADER is false. Default is
false.
.IP "" 8
.IP "BANNER" 8
String. If supplied, prints a '\f(CW!creator "BANNER"\fR' comment at the beginning
of the dump. Ignored if HEADER is false.
.IP "" 8
.IP "BINARY" 8
Boolean. If true, then output packet records in a binary format (explained
below). Defaults to false.
.IP "" 8
.IP "MULTIPACKET" 8
Boolean. If true, and the FIELDS option doesn't contain '\f(CWcount\fR', then
generate multiple summary entries for packets with nonzero extra-packets
annotations. For example, if MULTIPACKET is true, and a packet has
extra-packets annotation 1, then \fBToIPSummaryDump\fR will generate 2 lines for
that packet in the dump. False by default.
.IP "" 8
.IP "BAD_PACKETS" 8
Boolean. If true, then print '\f(CW!bad MESSAGE\fR' lines for packets with bad IP,
TCP, or UDP headers, as well as normal output.  The '\f(CW!bad\fR' line immediately
precedes the corresponding packet.  Output will contain dashes '\f(CW-\fR' in place
of data from bad headers.  Default is false.
.IP "" 8
.IP "CAREFUL_TRUNC" 8
Boolean.  If true, then print '\f(CW!bad truncated IP length\fR' lines for packets
whose data plus extra length annotation is less than their IP length.
\fBTcpdump\fR prints '\f(CWtruncated-ip - N bytes missing\fR' for such packets.
Actual packet output immediately follows the '\f(CW!bad\fR' line.  Default is true.
.IP "" 8
.IP "EXTRA_LENGTH" 8
Boolean.  If false, then ignore extra length annotations.  Defaults to true.
.IP "" 8
.PP

.SH "EXAMPLES"
Here are a couple lines from the start of a sample verbose dump.
.PP
.nf
\&  !IPSummaryDump 1.3
\&  !creator "aciri-ipsumdump -i wvlan0"
\&  !host no.lcdf.org
\&  !runtime 996022410.322317 (Tue Jul 24 17:53:30 2001)
\&  !data ip_src ip_dst
\&  63.250.213.167 192.150.187.106
\&  63.250.213.167 192.150.187.106
.fi
.PP
The end of the dump may contain a comment '\f(CW!drops N\fR', meaning that \f(CWN\fR
packets were dropped before they could be entered into the dump.
.PP
A '\f(CW!flowid\fR' comment can specify source and destination addresses and ports
for packets that otherwise don't have one.  Its arguments are '\f(CW!flowid SRC
SPORT DST DPORT [PROTO]\fR'.
.PP
Any packet line may contain fewer fields than specified in the '\f(CW!data\fR'
line, down to one field. Missing fields are treated as '\f(CW-\fR'.
.PP


.SH "NOTES"
The '\f(CWlen\fR' and '\f(CWpayload_len\fR' fields use the extra length
annotation. The '\f(CWcount\fR' field uses the extra packets annotation.
.PP
The characters corresponding to TCP flags are as follows:
.PP
.nf
\&   Flag name  Character  Value
\&   ---------  ---------  -----
\&   FIN        F          0x01
\&   SYN        S          0x02
\&   RST        R          0x04
\&   PSH        P          0x08
\&   ACK        A          0x10
\&   URG        U          0x20
\&   ECE        E          0x40
\&   CWR        C          0x80
\&   NS         N          0x100
.fi
.PP
The '\f(CWW\fR' character is also acceptable for CWR.  Old IP summary dumps might
contain an unsigned integer, representing the flags byte, or might use '\f(CWX\fR'
and '\f(CWY\fR' for ECE and CWR, respectively.
.PP
Verson 1.0 of the IPSummaryDump file format expressed fragment offsets in
8-byte units, not bytes. Fields in old dumps were sometimes quoted and
contained spaces instead of underscores. In Version 1.2 files payload MD5
checksums were sometimes incorrect.
.PP


.SH "IP OPTIONS"
Single IP option fields have the following representations.
.PP
.nf
\&    EOL, NOP        Not written, but FromIPSummaryDump
\&                    understands 'eol' and 'nop'
\& 
\&    RR              'rr{10.0.0.1,20.0.0.2}+5' (addresses
\&                    inside the braces come before the
\&                    pointer; '+5' means there is space for
\&                    5 more addresses after the pointer)
\& 
\&    SSRR, LSRR      'ssrr{1.0.0.1,1.0.0.2^1.0.0.3}'
\&                    ('^' indicates the pointer)
\& 
\&    TS              'ts{1,10000,!45}+2++3' (timestamps only
\&                    [type 0]; timestamp values 1, 10000,
\&                    and 45 [but 45 has the "nonstandard
\&                    timestamp" bit set]; the option has
\&                    room for 2 more timestamps; the
\&                    overflow counter is set to 3)
\& 
\&                    'ts.ip{1.0.0.1=1,1.0.0.2=2}+5'
\&                    (timestamps with IP addresses [type 1])
\& 
\&                    'ts.preip{1.0.0.1=1^1.0.0.2,1.0.0.3}'
\&                    (prespecified IP addresses [type 3];
\&                    the caret is the pointer)
\& 
\&    Other options   '98' (option 98, no data),
\&                    '99=0:5:10' (option with data, data
\&                    octets separated by colons)
.fi
.PP
Multiple options are separated by semicolons. (No single option will ever
contain a semicolon.) Any invalid option causes the entire field to be
replaced by a single question mark '\f(CW?\fR'. A period '\f(CW.\fR' is used for packets
with no options (except possibly EOL and NOP).
.PP


.SH "TCP OPTIONS"
Single TCP option fields have the following representations.
.PP
.nf
\&    EOL, NOP        Not written, but FromIPSummaryDump
\&                    understands 'eol' and 'nop'
\&    MSS             'mss1400'
\&    Window scale    'wscale10'
\&    SACK permitted  'sackok'
\&    SACK            'sack95-98'; each SACK block
\&                    is listed separately
\&    Timestamp       'ts669063908:38382731'
\&    Other options   '98' (option 98, no data),
\&                    '99=0:5:10' (option with data, data
\&                    octets separated by colons)
.fi
.PP
Multiple options are separated by semicolons. (No single option will ever
contain a semicolon.) Any invalid option causes the entire field to be
replaced by a single question mark '\f(CW?\fR'. A period '\f(CW.\fR' is used for packets
with no options (except possibly EOL and NOP).
.PP


.SH "BINARY FORMAT"
Binary IPSummaryDump files begin with several ASCII lines, just like regular
files. The line '\f(CW!binary\fR' indicates that the rest of the file, starting
immediately after the newline, consists of binary records. Each record looks
like this:
.PP
.nf
\&   +---------------+------------...
\&   |X|record length|    data
\&   +---------------+------------...
\&    <---4 bytes--->
.fi
.PP
The initial word of data contains the record length in bytes. (All numbers in
the file are stored in network byte order.) The record length includes the
initial word itself, so the minimum valid record length is 4. The high-order
bit '\f(CWX\fR' is the metadata indicator. It is zero for regular packets and one
for metadata lines.
.PP
Regular packet records have binary fields stored in the order indicated by
the '\f(CW!data\fR' line, as follows:
.PP
.nf
\&   Field Name    Length  Description
\&   timestamp        8    timestamp sec + usec
\&   utimestamp       8    timestamp sec + usec
\&   ntimestamp       8    timestamp sec + nsec
\&   ts_sec, ts_usec  4    timestamp sec/usec
\&   ts_usec1         8    timestamp in usec
\&   ip_src           4    IP source address
\&   ip_dst           4    IP destination address
\&   sport            2    source port
\&   dport            2    destination port
\&   ip_len           4    IP length field
\&   ip_proto         1    IP protocol
\&   ip_id            2    IP ID
\&   ip_tos           1    IP TOS
\&   ip_ttl           1    IP TTL
\&   ip_frag          1    fragment descriptor
\&                         ('F', 'f', or '.')
\&   ip_fragoff       2    IP fragment offset field
\&   ip_opt           ?    IP options
\&   tcp_seq          4    TCP sequence number
\&   tcp_ack          4    TCP ack number
\&   tcp_flags        1    TCP flags
\&   tcp_opt          ?    TCP options
\&   tcp_ntopt        ?    TCP non-timestamp options
\&   tcp_sack         ?    TCP SACK options
\&   udp_len          4    UDP length
\&   payload_len      4    payload length
\&   payload_md5     16    payload MD5 checksum
\&   payload_md5_hex 16    payload MD5 checksum
\&   ip_capture_len   4    IP capture length
\&   count            4    packet count
\&   first_timestamp  8    timestamp sec + usec
\&   eth_src          6    Ethernet source address
\&   eth_dst          6    Ethernet destination address
.fi
.PP
Each field is Length bytes long. Variable-length fields have Length '\f(CW?\fR' in
the table; in a packet record, these fields consist of a single length byte,
followed by that many bytes of data.
.PP
The data stored in a metadata record is just an ASCII string, ending with
newline, same as in a regular ASCII IPSummaryDump file. '\f(CW!bad\fR' records, for
example, are stored this way.
.PP


.SH "ELEMENT HANDLERS"



.IP "\fBflush\fR (write-only)" 5
Flush all internal buffers to disk.
.IP "" 5
.PP

.SH "SEE ALSO"
.M FromIPSummaryDump 7 ,
.M FromDump 7 ,
.M ToDump 7


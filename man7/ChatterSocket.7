.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/userlevel/chattersocket.hh:7'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "CHATTERSOCKET" 7click "12/Oct/2017" "Click"
.SH "NAME"
ChatterSocket \- Click element;
reports chatter messages to connected sockets
.SH "SYNOPSIS"
\fBChatterSocket\fR("TCP", PORTNUMBER [, \fIKEYWORDS\fR])
.br
\fBChatterSocket\fR("UNIX", FILENAME [, \fIKEYWORDS\fR])

\fBPorts\fR: none
.br
\fBDrivers\fR: userlevel
.br
.SH "DESCRIPTION"
Opens a chatter socket that allows other user-level programs to receive copies
of router chatter traffic. Depending on its configuration string,
\fBChatterSocket\fR will listen on TCP port PORTNUMBER, or on a UNIX-domain socket
named FILENAME.
.PP
The "server" (that is, the \fBChatterSocket\fR element) simply echoes any messages
generated by the router configuration to any existing "clients". The server
does not read any data from its clients.
.PP
When a connection is opened, \fBChatterSocket\fR responds by stating its protocol
version number with a line like "Click::ChatterSocket/1.0\\r\\n". The current
version number is 1.0.
.PP
\fBChatterSocket\fR broadcasts copies of messages generated by the default
ErrorHandler or the \f(CWclick_chatter\fR function. Most elements report messages
or run-time errors using one of these mechanisms.
.PP
If a client falls more than 500,000 bytes behind, \fBChatterSocket\fR automatically
closes its connection.
.PP
\fBChatterSocket\fR supports hot-swapping, meaning you can change configurations
without interrupting existing clients. The hot-swap will succeed only if the
old \fBChatterSocket\fR and the new \fBChatterSocket\fR have the same element name, and
the same socket type, port/filename, and chatter channel parameters.
Additionally, the new \fBChatterSocket\fR must have RETRIES set to 1 or more, since
the old \fBChatterSocket\fR has already bound the relevant socket.
.PP
Keyword arguments are:
.PP


.IP "CHANNEL" 8
Text word. The socket outputs messages sent to this chatter channel. Default
is the default channel, which corresponds to \f(CWclick_chatter()\fR.
.IP "" 8
Channels help you organize extensive debugging output. For example, you could
send extremely verbose messages to a `\f(CWverbose\fR' channel, then only connect
to that channel when you want verbosity.
.IP "" 8
To send messages to a particular channel, you should fetch the ErrorHandler
object corresponding to that channel, using the Router member function
\f(CWRouter::chatter_channel(const String &channel_name)\fR.
.IP "" 8
.IP "QUIET_CHANNEL" 8
Boolean. Messages sent to a non-default channel are not normally printed on
standard error. If QUIET_CHANNEL is false, however, the channel's messages do
go to standard error, along with chatter messages. Default is true.
.IP "" 8
.IP "GREETING" 8
Boolean. Determines whether the \f(CWClick::ChatterSocket/1.0\fR greeting is sent.
Default is true.
.IP "" 8
.IP "RETRIES" 8
Integer. If greater than 0, \fBChatterSocket\fR won't immediately fail when it can't
open its socket. Instead, it will attempt to open the socket once a second
until it succeeds, or until RETRIES unsuccessful attempts (after which it will
stop the router). Default is 0.
.IP "" 8
.IP "RETRY_WARNINGS" 8
Boolean. If true, \fBChatterSocket\fR will print warning messages every time it
fails to open a socket. If false, it will print messages only on the final
failure. Default is true.
.IP "" 8
.PP

.SH "EXAMPLES"

.nf
\&  ChatterSocket(unix, /tmp/clicksocket);
.fi
.PP



.SH "SEE ALSO"
.M ControlSocket 7


.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/userlevel/fromhost.hh:14'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "FROMHOST.U" 7click "12/Oct/2017" "Click"
.SH "NAME"
FromHost.u \- Click element;
interface to /dev/net/tun or ethertap (user-level)
.SH "SYNOPSIS"
\fBFromHost\fR(DEVNAME [, DST] [, \fIkeywords\fR GATEWAY, HEADROOM, ...])

\fBPorts\fR: no inputs, 1 output
.br
\fBProcessing\fR: push
.br
\fBDrivers\fR: userlevel
.br
.SH "DESCRIPTION"
\fBNote\fR: The KernelTun and KernelTap elements are preferable for most
purposes.
.PP
Reads packets from and writes packets through the universal TUN/TAP
module in Linux (the /dev/net/tun device).  This allows a
user-level Click to hand packets to the virtual ethernet
device. \fBFromHost\fR will also transfer packets from the virtual
ethernet device.
.PP
To use this element your kernel config must support CONFIG_TUN and
CONFIG_ETHERTAP.  Either modules (tun.o) or compiled in should work.
.PP
\fBFromHost\fR allocates a /dev/net/tun device (this might fail) and runs
.M ifconfig 8
to set the interface's local (i.e., kernel) address and netmask
to DST, which must be an IP prefix such as 18.26.4.9/24.  If DST is not
specified, then \fBFromHost\fR
assumes the tunnel has already been configured to the correct address.  If
a nonzero GATEWAY IP address (which must be on the same network as the tun)
is specified, then \fBFromHost\fR tries to set up a default route through that
host.  HEADROOM is the number of bytes left empty before the packet data
(to leave room for additional encapsulation headers). Default HEADROOM is
roughly 28.
.PP
Keyword arguments are:
.PP


.IP "ETHER" 8
Ethernet address. Specifies the fake device's Ethernet address. Default is
not specified, in which case the fake device's address is whatever the
kernel chooses.
.IP "" 8
.IP "DST6" 8
IPv6 prefix.  If specified, \fBFromHost\fR runs 
.M ifconfig 8
to set the
interface's local (i.e., kernel) IPv6 address and netmask.  Both DST and
DST6 may be specified.
.IP "" 8
.PP

.SH "NOTES"
Linux will send ARP queries to the fake device. You must respond to these
queries in order to receive any IP packets, but you can obviously respond
with any Ethernet address you'd like. Here is one common idiom:
.PP
.nf
\& FromHost(fake, 192.0.0.1/8)
\& -> fromhost_cl :: Classifier(12/0806, 12/0800);
\& fromhost_cl[0] -> ARPResponder(0.0.0.0/0 1:1:1:1:1:1) -> ToHost(fake);
\& fromhost_cl[1] -> ... // IP packets
.fi
.PP



.SH "EXAMPLES"

.nf
\& FromHost(fake, 192.0.0.1/8) -> ...;
.fi
.PP
An error like "open /dev/net/tun: No such file or directory" usually means
that you have not enabled tunnel support in your kernel.
.PP


.SH "ELEMENT HANDLERS"



.IP "\fBdev_name\fR (read-only)" 5
Returns the name of the device that this element is using.
.IP "" 5
.PP

.SH "SEE ALSO"
.M ToHost.u 7 ,
.M ifconfig 8


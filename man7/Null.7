.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/standard/nullelement.hh:6'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "NULL" 7click "12/Oct/2017" "Click"
.SH "NAME"
Null \- Click element;
null element: passes packets unchanged
.SH "SYNOPSIS"
\fBNull\fR

\fBPorts\fR: 1 input, 1 output
.br
\fBProcessing\fR: agnostic
.br
.SH "DESCRIPTION"
Emits input packets unchanged.
.PP

.SH "NOTES"
Click supports several null-type elements useful for different purposes.
.PP
\fIPlaceholder elements\fR help make configurations easier to read by allowing a
more natural declaration order. For example, you might say:
.PP
.nf
\&  join_point :: Null;
\&  // packet sources
\&  src0 :: ...;
\&  src0 -> join_point;
\&  src1 :: ...;
\&  src1 -> join_point;
\&  // packet sinks
\&  join_point -> c :: Classifier -> ...;
.fi
.PP
\fBNull\fR is a reasonable class for placeholder elements, but an empty compound
element serves the same purpose without any runtime overhead.
.PP
.nf
\&  join_point :: {->};
.fi
.PP
.M PushNull 7
and 
.M PullNull 7
can be used to force an agnostic configuration to be
push or pull, respectively.
.PP
\fBNull\fR itself is most useful for benchmarking.
.PP


.SH "SEE ALSO"
.M PushNull 7 ,
.M PullNull 7


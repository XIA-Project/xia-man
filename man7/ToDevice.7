.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/linuxmodule/todevice.hh:4'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "TODEVICE" 7click "12/Oct/2017" "Click"
.SH "NAME"
ToDevice \- Click element;
sends packets to network device (Linux kernel)
.SH "SYNOPSIS"
\fBToDevice\fR(DEVNAME [, BURST, \fIKEYWORDS\fR])

\fBPorts\fR: 1 input, no outputs
.br
\fBProcessing\fR: pull
.br
\fBDrivers\fR: linuxmodule
.br
.SH "DESCRIPTION"
This manual page describes the Linux kernel module version of the \fBToDevice\fR
element. For the user-level element, read the 
.M ToDevice.u 7
manual page.
.PP
Pulls packets from its single input and sends them out the Linux network
interface named DEVNAME. DEVNAME may also be an Ethernet address, in which
case \fBToDevice\fR searches for a device with that address.
.PP
Sends up to BURST packets each time it is scheduled. By default, BURST is 16.
For good performance, you should set BURST to be 8 times the number of
elements that could generate packets for this device.
.PP
Packets must have a link header. For Ethernet, \fBToDevice\fR makes sure every
packet is at least 60 bytes long (but see NO_PAD).
.PP
Keyword arguments are:
.PP


.IP "BURST" 8
Unsigned integer. Same as the BURST argument.
.IP "" 8
.IP "QUIET" 8
Boolean.  If true, then suppress device up/down messages.  Default is false.
.IP "" 8
.IP "QUEUE" 8
Integer.  The transmit queue to send to.  Default is 0.
.IP "" 8
.IP "ALLOW_NONEXISTENT" 8
Allow nonexistent devices. If true, and no device named DEVNAME exists when
the router is initialized, then \fBToDevice\fR will report a warning (rather than an
error). Later, while the router is running, if a device named DEVNAME appears,
\fBToDevice\fR will seamlessly begin sending packets to it. Default is false.
.IP "" 8
.IP "NO_PAD" 8
Boolean. If true, don't force packets to be at least 60 bytes (the
minimum Ethernet packet size).  This is useful because some 802.11
cards can send shorter Ethernet format packets.  Defaults false.
.IP "" 8
.IP "UP_CALL" 8
Write handler.  If supplied, this handler is called when the device or link
comes up.
.IP "" 8
.IP "DOWN_CALL" 8
Write handler.  If supplied, this handler is called when the device or link
goes down.
.IP "" 8
.PP

.SH "NOTES"
The Linux networking code may also send packets out the device. If the device
is in polling mode, Click will try to ensure that Linux eventually sends its
packets. Linux may cause the device to be busy when a \fBToDevice\fR wants to send a
packet. Click is not clever enough to re-queue such packets, and discards
them.
.PP
In Linux 2.2, whether or not the device is running in polling mode, \fBToDevice\fR
depends on the device driver's send operation for synchronization (e.g. tulip
send operation uses a bit lock). In Linux 2.4, we use the device's "xmit_lock"
to synchronize.
.PP
Packets sent via \fBToDevice\fR will not be received by any packet sniffers on the
machine. Use 
.M Tee 7
and 
.M ToHostSniffers 7
to send packets to sniffers explicitly.
.PP

.SH "ELEMENT HANDLERS"



.IP "\fBcount\fR (read-only)" 5
Returns the number of packets \fBToDevice\fR has pulled.
.IP "" 5
.IP "\fBcalls\fR (read-only)" 5
Returns a summary of \fBToDevice\fR statistics.
.IP "" 5
.IP "\fBdrops\fR (read-only)" 5
Returns the number of packets \fBToDevice\fR has dropped.  \fBToDevice\fR will drop
packets because they are too short for the device, or because the device
explicitly rejected them.
.IP "" 5
.IP "\fBreset_counts\fR (write-only)" 5
Resets counters to zero when written.
.IP "" 5
.PP

.SH "SEE ALSO"
.M FromDevice 7 ,
.M PollDevice 7 ,
.M FromHost 7 ,
.M ToHost 7 ,
.M ToDevice.u 7 ,
.M Tee 7 ,
.M ToHostSniffers 7


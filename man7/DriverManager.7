.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/standard/drivermanager.hh:7'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "DRIVERMANAGER" 7click "12/Oct/2017" "Click"
.SH "NAME"
DriverManager \- Click element;
a 
.M Script 7
that manages driver stop events
.SH "SYNOPSIS"
\fBDriverManager\fR(INSTRUCTIONS...)

\fBPorts\fR: any number of inputs, any number of outputs
.br
.SH "DESCRIPTION"
\fBDriverManager\fR is simply a 
.M Script 7
element whose default TYPE is "\f(CWDRIVER\fR".
.PP
Click \fIdriver stop events\fR suggest that the driver should stop processing.
Any element can register a driver stop event; for instance, trace processing
elements can stop the driver when they finish a trace file.  You generally
request this functionality by supplying a 'STOP true' keyword argument.
.PP
Driver stop events normally stop the driver: the user-level driver calls
\f(CWexit(0)\fR, or the kernel driver kills the relevant kernel threads.  The
\fBDriverManager\fR element changes this behavior.  When a driver stop event occurs,
the router steps through the \fBDriverManager\fR's script by calling its \f(CWstep\fR
handler.  The driver exits only when the script ends or a \f(CWstop\fR instruction
is executed.
.PP
For example, the following \fBDriverManager\fR element ensures that an element,
\f(CWk\fR, has time to clean itself up before the driver is stopped. It waits for
the first driver stop event, then calls \f(CWk\fR's \f(CWcleanup\fR handler, waits for a
tenth of a second, and stops the driver.
.PP
.nf
\&  DriverManager(pause, write k.cleanup, wait 0.1s, stop);
.fi
.PP
Use this idiom when one of your elements must emit a last packet or two before
the router configuration is destroyed.
.PP


.SH "SEE ALSO"
.M Script 7


.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/etherswitch/spantree.hh:10'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "ETHERSPANTREE" 7click "12/Oct/2017" "Click"
.SH "NAME"
EtherSpanTree \- Click element;
802.1d Ethernet spanning tree implementation
.SH "SYNOPSIS"
\fBEtherSpanTree\fR(ADDR, INPUT_SUPPRESSOR, OUTPUT_SUPPRESSOR, SWITCH)

\fBPorts\fR: any number of inputs, the same number of outputs
.br
\fBProcessing\fR: push
.br
.SH "DESCRIPTION"
Implements the IEEE 802.1d spanning tree algorithm for Ethernet switches.
Expects 802.1d control packets on its inputs and reacts by selectively
suppressing forwarding on an associated 
.M EtherSwitch 7 .
.PP
ADDR is the address of this Ethernet switch.  SWITCH is the name of an
.M EtherSwitch 7
element that actually switches packets.  INPUT_SUPPRESSOR and
OUTPUT_SUPPRESSOR are two 
.M Suppressor 7
elements; they should be placed upstream
and downstream of the SWITCH.  The \fBEtherSpanTree\fR, 
.M Suppressor 7 ,
and 
.M EtherSwitch 7
elements should all have the same numbers of inputs and outputs, equal to the
number of ports in the switch.
.PP

.SH "EXAMPLES"

.nf
\&  from_port0, from_port1 :: FromDevice...;
\&  to_port0, to_port1 :: ToDevice...;
\& 
\&  span_tree :: EtherSpanTree(00-1f-29-4d-f8-31, in_supp, out_supp, switch);
\&  switch :: EtherSwitch;
\&  in_supp, out_supp :: Suppressor;
\& 
\&  from_port0 -> c0 :: Classifier(14/4242, -); // ethertype 802.1d, others
\&  from_port1 -> c1 :: Classifier(14/4242, -);
\& 
\&  q0 :: Queue -> to_port0;
\&  q1 :: Queue -> to_port1;
\& 
\&  c0 [0] -> [0] span_tree [0] -> q0;
\&  c1 [0] -> [1] span_tree [1] -> q1;
\& 
\&  c0 [1] -> [0] in_supp [0] -> [0] switch [0] -> [0] out_supp [0] -> q0;
\&  c1 [1] -> [1] in_supp [1] -> [1] switch [1] -> [1] out_supp [1] -> q1;
.fi
.PP



.SH "SEE ALSO"
.M EtherSwitch 7 ,
.M Suppressor 7


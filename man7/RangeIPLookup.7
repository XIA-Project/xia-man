.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/ip/rangeiplookup.hh:8'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "RANGEIPLOOKUP" 7click "12/Oct/2017" "Click"
.SH "NAME"
RangeIPLookup \- Click element;
IP routing lookup through binary search in a very compact table
.SH "SYNOPSIS"
\fBRangeIPLookup\fR(ADDR1/MASK1 [GW1] OUT1, ADDR2/MASK2 [GW2] OUT2, ...)

\fBPorts\fR: 1 input, any number of outputs
.br
\fBProcessing\fR: push
.br
\fBDrivers\fR: userlevel, bsdmodule
.br
.SH "DESCRIPTION"
Expects a destination IP address annotation with each packet. Looks up that
address in its routing table, using longest-prefix-match, sets the destination
annotation to the corresponding GW (if specified), and emits the packet on the
indicated OUTput port.
.PP
Each argument is a route, specifying a destination and mask, an optional
gateway IP address, and an output port.  No destination-mask pair should occur
more than once.
.PP
\fBRangeIPLookup\fR aims at achieving high lookup speeds through exploiting the CPU
cache locality.  The routing table is expanded into a very small lookup
structure, typically occupying less then 4 bytes per IP prefix.  As an example,
a lookup structure corresponding to a routing table with 167000 entries (a
realistic snapshot taken from a core Internet router) occupies only around
512 KBytes of RAM.  Depending on how sucessfully the CPU cache
affinity can be maintained, worst-case lookup rates exceeding 20 million
lookups per second can be achieved using modern commodity CPUs.
.PP
\fBRangeIPLookup\fR maintains a large 
.M DirectIPLookup 7
table as well as its own
tables.  Although this subsidiary table is only accessed during route updates,
it significantly adds to \fBRangeIPLookup\fR's total memory footprint.
.PP

.SH "ELEMENT HANDLERS"



.IP "\fBtable\fR (read-only)" 5
Outputs a human-readable version of the current routing table.
.IP "" 5
.IP "\fBlookup\fR (read-only)" 5
Reports the OUTput port and GW corresponding to an address.
.IP "" 5
.IP "\fBadd\fR (write-only)" 5
Adds a route to the table. Format should be `\f(CWADDR/MASK [GW] OUT\fR'.
Fails if a route for \f(CWADDR/MASK\fR already exists.
.IP "" 5
.IP "\fBset\fR (write-only)" 5
Sets a route, whether or not a route for the same prefix already exists.
.IP "" 5
.IP "\fBremove\fR (write-only)" 5
Removes a route from the table. Format should be `\f(CWADDR/MASK\fR'.
.IP "" 5
.IP "\fBctrl\fR (write-only)" 5
Adds or removes a group of routes. Write `\f(CWadd\fR/\f(CWset ADDR/MASK [GW] OUT\fR' to
add a route, and `\f(CWremove ADDR/MASK\fR' to remove a route. You can supply
multiple commands, one per line; all commands are executed as one atomic
operation.
.IP "" 5
.IP "\fBflush\fR (write-only)" 5
Clears the entire routing table in a single atomic operation.
.IP "" 5
.PP

.SH "NOTES"
See 
.M IPRouteTable 7
for a performance comparison of the various IP routing
elements.
.PP

.SH "SEE ALSO"
.M IPRouteTable 7 ,
.M RadixIPLookup 7 ,
.M DirectIPLookup 7 ,
.M LinearIPLookup 7 ,
.M SortedIPLookup 7 ,
.M StaticIPLookup 7 ,
.M LinuxIPLookup 7


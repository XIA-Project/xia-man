.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/local/tcpack.hh:8'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "TCPACK" 7click "12/Oct/2017" "Click"
.SH "NAME"
TCPAck \- Click element;
acknowledge TCP packets
.SH "SYNOPSIS"
\fBTCPAck\fR([ACK_DELAY])

\fBPorts\fR: 2 inputs, 3 outputs
.br
.SH "DESCRIPTION"
performs TCP style acknowledgement. marked TCP/IP packets are expected on
both input and output ports. use MarkIPHeader to mark packets.
.PP
input port 0 is TCP input. a packet that arrives on this input may trigger
an acknowledgement. the acknowledgement acknowledges the latest in-order
packet received. \fBTCPAck\fR gets this information from a downstream TCPBuffer
element that it discovers using flow-based router context, much like how
RED elements discover their QUEUE elements. the packet is sent out on
output port 0 untouched.
.PP
input port 1 is TCP output. a packet that arrives on this input get tagged
with an acknowledgement number. this ack number is obtained from TCPBuffer
as described above. this packet also causes \fBTCPAck\fR to cancel scheduled ACK.
the packet is then sent out on output port 1.
.PP
finally, output port 2 is used to send scheduled ACKs. packets generated on
this port does not have any of the flow ID nor sequence number. another
element, such as TCPConn, should be used downstream from this port to set
those fields. an ACK is generated on this output only if after ACK_DELAY
number of ms a triggered acknowledge was not sent. by default, ACK_DELAY is
set to 20.
.PP
\fBTCPAck\fR only deals with DATA packets. it doesn't try to acknowledge SYN and
FIN packets. \fBTCPAck\fR starts using ack number from the first SYN ACK packet
it sees on in/output port 0 or 1. packets before that are rejected.
.PP
\fBTCPAck\fR does not compute checksum on any packets. use SetIPChecksum and
SetTCPChecksum instead.


.\" -*- mode: nroff -*-
.\" Generated by 'click-elem2man' from '../elements/userlevel/controlsocket.hh:10'
.de M
.IR "\\$1" "(\\$2)\\$3"
..
.de RM
.RI "\\$1" "\\$2" "(\\$3)\\$4"
..
.TH "CONTROLSOCKET" 7click "12/Oct/2017" "Click"
.SH "NAME"
ControlSocket \- Click element;
opens control sockets for other programs
.SH "SYNOPSIS"
\fBControlSocket\fR("TCP", PORTNUMBER [, \fIkeywords READONLY, PROXY, VERBOSE, LOCALHOST, RETRIES, RETRY_WARNINGS\fR])
.br
\fBControlSocket\fR("UNIX", FILENAME [, \fIkeywords\fR])

\fBPorts\fR: none
.br
\fBDrivers\fR: userlevel
.br
.SH "DESCRIPTION"
Opens a control socket that allows other user-level programs to call read or
write handlers on the router. Depending on its configuration string,
\fBControlSocket\fR will listen on TCP port PORTNUMBER, or on a UNIX-domain socket
named FILENAME. With the PROXY keyword argument, you can make \fBControlSocket\fR speak to
a kernel driver; see below.
.PP
The "server" (that is, the \fBControlSocket\fR element) speaks a relatively
simple line-based protocol. Commands sent to the server are single lines of
text; they consist of words separated by spaces. The server responds to
every command with at least one message line followed optionally by some
data. Message lines start with a three-digit response code, as in FTP. When
multiple message lines are sent in response to a single command, all but
the last begin with the response code and a hyphen (as in "200-Hello!");
the last line begins with the response code and a space (as in "200
Hello!").
.PP
The server will accept lines terminated by CR, LF, or CRLF. Its response
lines are always terminated by CRLF.
.PP
When a connection is opened, the server responds by stating its protocol
version number with a line like "Click::ControlSocket/1.3". The current
version number is 1.3. Changes in minor version number will only add commands
and functionality to this specification, not change existing functionality.
.PP
\fBControlSocket\fR supports hot-swapping, meaning you can change configurations
without interrupting existing clients. The hot-swap will succeed only if the
old \fBControlSocket\fR and the new \fBControlSocket\fR have the same element name, and
the same socket type and port/filename parameters. Additionally, the new
\fBControlSocket\fR must have RETRIES set to 1 or more, since the old \fBControlSocket\fR
has already bound the relevant socket.
.PP
Keyword arguments are:
.PP


.IP "READONLY" 8
Boolean.  Disallows write handlers if true (it is false by
default).
.IP "" 8
.IP "PROXY" 8
String. Specifies an element proxy. When a user requests the value of handler
E.H, \fBControlSocket\fR will actually return the value of `PROXY.E.H'. This is
useful with elements like 
.M KernelHandlerProxy 7 .
Default is empty (no proxy).
.IP "" 8
.IP "VERBOSE" 8
Boolean. When true, \fBControlSocket\fR will print messages whenever it accepts a
new connection or drops an old one. Default is false.
.IP "" 8
.IP "LOCALHOST" 8
Boolean. When true, a TCP \fBControlSocket\fR will only accept connections from the
local host (127.0.0.1). Default is false.
.IP "" 8
.IP "RETRIES" 8
Integer. If greater than 0, \fBControlSocket\fR won't immediately fail when it can't
open its socket. Instead, it will attempt to open the socket once a second
until it succeeds, or until RETRIES unsuccessful attempts (after which it will
stop the router). Default is 0.
.IP "" 8
.IP "RETRY_WARNINGS" 8
Boolean. If true, \fBControlSocket\fR will print warning messages every time it
fails to open a socket. If false, it will print messages only on the final
failure. Default is true.
.IP "" 8
.PP
The PORT argument for TCP ControlSockets can also be an integer followed by a
plus sign, as in "\fBControlSocket\fR(TCP, 41930+)".  This means that the
\fBControlSocket\fR should bind on some port \fIgreater than or equal to\fR PORT.  If
PORT itself is in use, \fBControlSocket\fR will try several nearby ports before
giving up.  This can be useful in tests.
.PP
.SH "SERVER COMMANDS"
Many server commands
take a \fIhandler\fR argument. These arguments name handlers, and take one of
three forms: \f(CW\fIelementname\fR.\fIhandlername\fR\fR names a particular element's
handler; \f(CW\fIelementnumber\fR.\fIhandlername\fR\fR also names an element handler, but
the element is identified by index, starting from 1; and \f(CW\fIhandlername\fR\fR
names a global handler. (There are seven global read handlers, named
\f(CWversion\fR, \f(CWlist\fR, \f(CWclasses\fR, \f(CWconfig\fR, \f(CWflatconfig\fR, \f(CWpackages\fR, and
\f(CWrequirements\fR. See click.o(8) for more information.)
.PP


.IP "READ \fIhandler\fR [\fIparams...\fR]" 5
Call a read \fIhandler\fR, passing the \fIparams\fR, if any,
as arguments, and return the results.
On success, responds with a "success" message (response
code 2xy) followed by a line like "DATA \fIn\fR". Here, \fIn\fR is a
decimal integer indicating the length of the read handler data. The \fIn\fR
bytes immediately following (the CRLF that terminates) the DATA line are
the handler's results.
.IP "" 5
.IP "READDATA \fIhandler\fR \fIn\fR" 5
Call a read \fIhandler\fR, passing the \fIn\fR bytes immediately following (the CRLF
that terminates) the READDATA line as arguments, and return the results with
"DATA \fIn\fR" as in the READ command. Introduced in version 1.2 of the
\fBControlSocket\fR protocol.
.IP "" 5
.IP "READUNTIL \fIhandler\fR \fIterminator\fR" 5
Call a read \fIhandler\fR and return the results with "DATA \fIn\fR" as in the READ
command. Parameters for \fIhandler\fR are read from the input stream. Parameter
reading stops at the first line that equals \fIterminator\fR. If \fIterminator\fR is
not supplied, parameter reading stops at the first blank line. When searching
for a terminator, \fBControlSocket\fR removes trailing spaces from both
\fIterminator\fR and the input lines. Introduced in version 1.3 of the
\fBControlSocket\fR protocol.
.IP "" 5
.IP "WRITE \fIhandler\fR \fIparams...\fR" 5
Call a write \fIhandler\fR, passing the \fIparams\fR, if any, as arguments.
.IP "" 5
.IP "WRITEDATA \fIhandler\fR \fIn\fR" 5
Call a write \fIhandler\fR. The arguments to pass are the \fIn\fR bytes immediately
following (the CRLF that terminates) the WRITEDATA line.
.IP "" 5
.IP "WRITEUNTIL \fIhandler\fR \fIterminator\fR" 5
Call a write \fIhandler\fR. The arguments to pass are the read from the input
stream, stopping at the first line that equals \fIterminator\fR.
.IP "" 5
.IP "CHECKREAD \fIhandler\fR" 5
Checks whether a \fIhandler\fR exists and is readable. The return status is 200
for readable handlers, and an appropriate error status for non-readable
handlers or nonexistent handlers.
.IP "" 5
.IP "CHECKWRITE \fIhandler\fR" 5
Checks whether a \fIhandler\fR exists and is writable.
.IP "" 5
.IP "LLRPC \fIllrpc\fR [\fIn\fR]" 5
Call an LLRPC \fIllrpc\fR and return the results. \fILlrpc\fR should have the form
\f(CW\fIelement\fR#\fIhexnumber\fR\fR. The \f(CW\fIhexnumber\fR\fR is the LLRPC number, from
\f(CW<click/llrpc.h>\fR, in hexadecimal network format. Translate \f(CWCLICK_LLRPC\fR
constants to network format by calling
\f(CWCLICK_LLRPC_HTON(CLICK_LLRPC_...)\fR. If \fIn\fR is given, then the \fIn\fR bytes
immediately following (the CRLF that terminates) the LLRPC line are passed in
as an argument. The results are returned after a "DATA \fInn\fR" line, as in
READ.
.IP "" 5
\fBControlSocket\fR will not call an LLRPC unless it can determine (from the command
number) how much data the LLRPC expects and returns. (Only "flat" LLRPCs may
be called; they are declared using the _CLICK_IOC_[RWS]F macros.)
.IP "" 5
.IP "QUIT" 5
Close the connection.
.IP "" 5
.PP
The server's response codes follow this pattern.
.PP

.IP "2xy" 5
The command succeeded.
.IP "" 5
.IP "5xy" 5
The command failed.
.IP "" 5
.PP
Here are some of the particular error messages:
.PP
.nf
\&  200 OK.
\&  220 OK, but the handler reported some warnings.
\&  500 Syntax error.
\&  501 Unimplemented command.
\&  510 No such element.
\&  511 No such handler.
\&  520 Handler error.
\&  530 Permission denied.
\&  540 No router installed.
.fi
.PP
\fBControlSocket\fR is only available in user-level processes.
.PP

.SH "EXAMPLES"

.nf
\&  ControlSocket(unix, /tmp/clicksocket);
.fi
.PP



.SH "ELEMENT HANDLERS"



.IP "\fBport\fR (read-only)" 5
Returns the \fBControlSocket\fR's port number.  Only available for TYPE TCP.
.IP "" 5
.IP "\fBfilename\fR (read-only)" 5
Returns the \fBControlSocket\fR's UNIX socket filename.  Only available for TYPE
UNIX.
.IP "" 5
.PP

.SH "SEE ALSO"
.M ChatterSocket 7 ,
.M KernelHandlerProxy 7


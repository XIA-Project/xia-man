.TH "xsocket/Xgetifaddrs.c" 3 "Fri Mar 3 2017" "Version 2.0" "XSocket API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xsocket/Xgetifaddrs.c \- \fBXgetifaddrs()\fP, \fBXfreeifaddrs()\fP - get interface addresses\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'Xsocket\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBXgetifaddrs\fP (struct ifaddrs **ifap)"
.br
.RI "\fIget a list of XIA network interfaces \fP"
.ti -1c
.RI "void \fBXfreeifaddrs\fP (struct ifaddrs *ifa)"
.br
.RI "\fIfree memory allocated by Xgetifaddrs \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "void Xfreeifaddrs (struct ifaddrs * ifa)"
Free's the memory allocated by XgetifAddrs()\&.
.PP
\fBParameters:\fP
.RS 4
\fIifa\fP pointer to ifaddr structure to be freed\&.
.RE
.PP
\fBReturns:\fP
.RS 4
void 
.RE
.PP

.SS "int Xgetifaddrs (struct ifaddrs ** ifap)"
The \fBXgetifaddrs()\fP function creates a linked list of structures describing XIA enabled network interfaces of the local system, and stores the address of the first item of the list in *ifap\&. The list consists of ifaddrs structures, defined as follows:
.PP
.PP
.nf
 struct ifaddrs {
        struct ifaddrs  *ifa_next;    // Next item in list
        char            *ifa_name;    // Name of interface
        unsigned int     ifa_flags;   // Flags from SIOCGIFFLAGS
        struct sockaddr *ifa_addr;    // Address of interface
        struct sockaddr *ifa_netmask; // Netmask of interface
        union {
            struct sockaddr *ifu_broadaddr;
            // Broadcast address of interface
            struct sockaddr *ifu_dstaddr;
            // Point-to-point destination address
        } ifa_ifu;
        #define          ifa_broadaddr ifa_ifu.ifu_broadaddr
        #define          ifa_dstaddr   ifa_ifu.ifu_dstaddr
        void            *ifa_data;    // Address-specific data
    };
.fi
.PP
.PP
The ifa_next field contains a pointer to the next structure on the list, or NULL if this is the last item of the list\&.
.PP
The ifa_name points to the null-terminated interface name\&.
.PP
The ifa_flags field contains the interface flags, as returned by the SIOCGIFFLAGS ioctl(2) operation (see netdevice(7) for a list of these flags)\&.
.PP
The ifa_addr field points to a structure containing the interface address\&. Under XIA, these will all be of type sockaddr_x\&. This field may contain a null pointer\&.
.PP
The ifa_netmask field points will always be NULL under XIA\&.
.PP
Currently the ifa_ifu union will never contain a broadcast address\&.
.PP
The ifa_data pointer will always be NULL
.PP
The data returned by \fBXgetifaddrs()\fP is dynamically allocated and should be freed using \fBXfreeifaddrs()\fP when no longer needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIifap\fP pointer to a pointer to accecpt the returned ifaddrs structure
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success 
.PP
-1 on error with errno set appropriately\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for XSocket API from the source code\&.

.TH "Element::Port" 3 "Thu Oct 12 2017" "Click" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Element::Port \- An \fBElement\fP's ports\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBactive\fP () const "
.br
.RI "\fIReturns whether this port is active (a push output or a pull input)\&. \fP"
.ti -1c
.RI "\fBElement\fP * \fBelement\fP () const "
.br
.RI "\fIReturns the element connected to this active port\&. \fP"
.ti -1c
.RI "int \fBport\fP () const "
.br
.RI "\fIReturns the port number of the port connected to this active port\&. \fP"
.ti -1c
.RI "void \fBpush\fP (\fBPacket\fP *p) const "
.br
.RI "\fIPush packet \fIp\fP over this port\&. \fP"
.ti -1c
.RI "\fBPacket\fP * \fBpull\fP () const "
.br
.RI "\fIPull a packet over this port and return it\&. \fP"
.ti -1c
.RI "void \fBassign\fP (bool isoutput, \fBElement\fP *e, int \fBport\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 
An \fBElement\fP's ports\&. 

Each of an element's ports has an associated \fBPort\fP object, accessible via the \fBElement::port()\fP, \fBElement::input()\fP, and \fBElement::output()\fP functions\&. Each \fIactive\fP port knows, and can transfer a packet with, the single complementary port to which it is connected\&. Thus, each push output knows its connected input, and can push a packet there; and each pull input can pull a packet from its connected output\&. Inactive ports -- push inputs and pull outputs -- can be connected multiple times\&. Their corresponding \fBPort\fP objects have very little functionality\&.
.PP
\fBElement\fP authors generally encounter \fBPort\fP objects only in two stylized formulations\&. First, to push a packet \fCp\fP out on push output port \fCi:\fP 
.PP
.PP
.nf
output(i)\&.push(p);
.fi
.PP
.PP
And second, to pull a packet \fCp\fP from pull input port \fCi:\fP 
.PP
.PP
.nf
Packet *p = input(i)\&.pull();
.fi
.PP
.PP
\fBSee also:\fP
.RS 4
\fBElement::checked_output_push()\fP 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "bool Element::Port::active () const\fC [inline]\fP"

.PP
Returns whether this port is active (a push output or a pull input)\&. 
.PP
\fBSee also:\fP
.RS 4
\fBElement::port_active\fP 
.RE
.PP

.SS "\fBElement\fP * Element::Port::element () const\fC [inline]\fP"

.PP
Returns the element connected to this active port\&. Returns 0 if this port is not \fBactive()\fP\&. 
.SS "int Element::Port::port () const\fC [inline]\fP"

.PP
Returns the port number of the port connected to this active port\&. Returns < 0 if this port is not \fBactive()\fP\&. 
.SS "void Element::Port::push (\fBPacket\fP * p) const\fC [inline]\fP"

.PP
Push packet \fIp\fP over this port\&. Pushes packet \fIp\fP downstream through the router configuration by passing it to the next element's \fBpush() \fP function\&. Returns when the rest of the router finishes processing \fIp\fP\&.
.PP
This port must be an \fBactive()\fP push output port\&. Usually called from element code like \fBoutput(i) \fP \&.push(p)\&.
.PP
When element code calls \fBElement::Port::push\fP(\fIp\fP), it relinquishes control of packet \fIp\fP\&. When \fBpush()\fP returns, \fIp\fP may have been altered or even freed by downstream elements\&. Thus, you must not use \fIp\fP after pushing it downstream\&. To push a copy and keep a copy, see \fBPacket::clone()\fP\&.
.PP
output(i)\&.push(p) basically behaves like the following code, although it maintains additional statistics depending on how CLICK_STATS is defined:
.PP
.PP
.nf
output(i)\&.element()->push(output(i)\&.port(), p);
.fi
.PP
 
.SS "\fBPacket\fP * Element::Port::pull () const\fC [inline]\fP"

.PP
Pull a packet over this port and return it\&. Pulls a packet from upstream in the router configuration by calling the previous element's \fBpull() \fP function\&. When the router finishes processing, returns the result\&.
.PP
This port must be an \fBactive()\fP pull input port\&. Usually called from element code like \fBinput(i) \fP \&.\fBpull()\fP\&.
.PP
input(i)\&.\fBpull()\fP basically behaves like the following code, although it maintains additional statistics depending on how CLICK_STATS is defined:
.PP
.PP
.nf
input(i)\&.element()->pull(input(i)\&.port())
.fi
.PP
 

.SH "Author"
.PP 
Generated automatically by Doxygen for Click from the source code\&.

.TH "Handler" 3 "Thu Oct 12 2017" "Click" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Handler \- Represents a router's handlers\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBFlags\fP { \fBf_read\fP = 0x0001, \fBf_write\fP = 0x0002, \fBf_read_param\fP = 0x0004, \fBf_exclusive\fP = 0, \fBf_nonexclusive\fP = 0x0020, \fBf_raw\fP = 0x0040, \fBf_read_private\fP = 0x0080, \fBf_write_private\fP = 0x0100, \fBf_deprecated\fP = 0x0200, \fBf_uncommon\fP = 0x0400, \fBf_calm\fP = 0x0800, \fBf_expensive\fP = 0x1000, \fBf_button\fP = 0x2000, \fBf_checkbox\fP = 0x4000, \fBf_driver0\fP = 1U << 26, \fBf_driver1\fP = 1U << 27, \fBf_user_shift\fP = 28, \fBf_user0\fP = 1U << f_user_shift, \fBf_read_comprehensive\fP = 0x0008, \fBf_write_comprehensive\fP = 0x0010, \fBf_special\fP = f_read | f_write | f_read_param | f_read_comprehensive | f_write_comprehensive }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBString\fP & \fBname\fP () const "
.br
.RI "\fIReturn this handler's name\&. \fP"
.ti -1c
.RI "uint32_t \fBflags\fP () const "
.br
.RI "\fIReturn this handler's flags\&. \fP"
.ti -1c
.RI "void * \fBuser_data\fP (int op) const "
.br
.RI "\fIReturn this handler's callback data\&. \fP"
.ti -1c
.RI "void * \fBread_user_data\fP () const "
.br
.RI "\fIReturn this handler's read callback data\&. \fP"
.ti -1c
.RI "void * \fBwrite_user_data\fP () const "
.br
.RI "\fIReturn this handler's write callback data\&. \fP"
.ti -1c
.RI "bool \fBreadable\fP () const "
.br
.RI "\fITest if this is a valid read handler\&. \fP"
.ti -1c
.RI "bool \fBread_param\fP () const "
.br
.RI "\fITest if this is a valid read handler that may accept parameters\&. \fP"
.ti -1c
.RI "bool \fBread_visible\fP () const "
.br
.RI "\fITest if this is a public read handler\&. \fP"
.ti -1c
.RI "bool \fBwritable\fP () const "
.br
.RI "\fITest if this is a valid write handler\&. \fP"
.ti -1c
.RI "bool \fBwrite_visible\fP () const "
.br
.RI "\fITest if this is a public write handler\&. \fP"
.ti -1c
.RI "bool \fBvisible\fP () const "
.br
.RI "\fITest if this is a public read or write handler\&. \fP"
.ti -1c
.RI "bool \fBallow_concurrent_handlers\fP () const "
.br
.RI "\fITest if this handler can execute concurrently with other handlers\&. \fP"
.ti -1c
.RI "bool \fBallow_concurrent_threads\fP () const "
.br
.RI "\fITest if this handler can execute concurrently with router threads\&. \fP"
.ti -1c
.RI "bool \fBraw\fP () const "
.br
.RI "\fITest if spaces should be preserved when calling this handler\&. \fP"
.ti -1c
.RI "\fBString\fP \fBcall_read\fP (\fBElement\fP *e, const \fBString\fP &param, \fBErrorHandler\fP *errh) const "
.br
.RI "\fICall a read handler, possibly with parameters\&. \fP"
.ti -1c
.RI "\fBString\fP \fBcall_read\fP (\fBElement\fP *e, \fBErrorHandler\fP *errh=0) const "
.br
.RI "\fICall a read handler without parameters\&. \fP"
.ti -1c
.RI "int \fBcall_write\fP (const \fBString\fP &value, \fBElement\fP *e, \fBErrorHandler\fP *errh) const "
.br
.RI "\fICall a write handler\&. \fP"
.ti -1c
.RI "\fBString\fP \fBunparse_name\fP (\fBElement\fP *e) const "
.br
.RI "\fIUnparse this handler's name\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBString\fP \fBunparse_name\fP (\fBElement\fP *e, const \fBString\fP &hname)"
.br
.RI "\fIUnparse a handler name\&. \fP"
.ti -1c
.RI "static const \fBHandler\fP * \fBblank_handler\fP ()"
.br
.RI "\fIReturns a handler incapable of doing anything\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Represents a router's handlers\&. 

Each handler is represented by a \fBHandler\fP object\&. Handlers are not attached to specific elements, allowing a single handler object to be shared among multiple elements with the same basic handler definition\&. Handlers cannot be created directly; to create one, call methods such as \fBRouter::add_read_handler()\fP, \fBRouter::add_write_handler()\fP, \fBRouter::set_handler()\fP, \fBElement::add_read_handler()\fP, \fBElement::add_write_handler()\fP, and \fBElement::set_handler()\fP\&.
.PP
The \fBHandlerCall\fP class simplifies interaction with handlers and is preferred to direct \fBHandler\fP calls for most purposes\&. 
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBHandler::Flags\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIf_read \fP\fP
\fBHandler\fP supports read operations\&. 
.TP
\fB\fIf_write \fP\fP
\fBHandler\fP supports write operations\&. 
.TP
\fB\fIf_read_param \fP\fP
Read handler takes parameters\&. 
.TP
\fB\fIf_exclusive \fP\fP
\fBHandler\fP is exclusive (the default): router threads must stop while it is called\&. 
.TP
\fB\fIf_nonexclusive \fP\fP
\fBHandler\fP is nonexclusive: router threads don't need to stop while it is called\&. 
.TP
\fB\fIf_raw \fP\fP
Don't add newline to results\&. 
.TP
\fB\fIf_read_private \fP\fP
Read handler private (invisible outside the router configuration)\&. 
.TP
\fB\fIf_write_private \fP\fP
Write handler private (invisible\&. 
.TP
\fB\fIf_deprecated \fP\fP
outside the router configuration)\&. \fBHandler\fP is deprecated and available only for compatibility\&. 
.TP
\fB\fIf_uncommon \fP\fP
User interfaces should not display handler by default\&. 
.TP
\fB\fIf_calm \fP\fP
Read handler value changes rarely\&. 
.TP
\fB\fIf_expensive \fP\fP
Read handler is expensive to call\&. 
.TP
\fB\fIf_button \fP\fP
Write handler ignores data\&. 
.TP
\fB\fIf_checkbox \fP\fP
Read/write handler is boolean and should be rendered as a checkbox\&. 
.TP
\fB\fIf_driver1 \fP\fP
Uninterpreted handler flags available for drivers\&. 
.TP
\fB\fIf_user0 \fP\fP
First uninterpreted handler flag available for element-specific use\&. Equals 1 << f_user_shift\&. 
.TP
\fB\fIf_special \fP\fP
These flags may not be set by \fBRouter::set_handler_flags()\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "const \fBString\fP& Handler::name () const\fC [inline]\fP"

.PP
Return this handler's name\&. 
.SS "uint32_t Handler::flags () const\fC [inline]\fP"

.PP
Return this handler's flags\&. The result is a bitwise-or of flags from the Flags enumeration type\&. 
.SS "void* Handler::user_data (int op) const\fC [inline]\fP"

.PP
Return this handler's callback data\&. 
.PP
\fBParameters:\fP
.RS 4
\fIop\fP either f_read or f_write\&. 
.RE
.PP

.SS "void* Handler::read_user_data () const\fC [inline]\fP"

.PP
Return this handler's read callback data\&. 
.SS "void* Handler::write_user_data () const\fC [inline]\fP"

.PP
Return this handler's write callback data\&. 
.SS "bool Handler::readable () const\fC [inline]\fP"

.PP
Test if this is a valid read handler\&. never 
.SS "bool Handler::read_param () const\fC [inline]\fP"

.PP
Test if this is a valid read handler that may accept parameters\&. 
.SS "bool Handler::read_visible () const\fC [inline]\fP"

.PP
Test if this is a public read handler\&. Private handlers may be not called from outside the router configuration\&. Handlers are public by default; to make a read handler private, add the f_read_private flag\&. 
.SS "bool Handler::writable () const\fC [inline]\fP"

.PP
Test if this is a valid write handler\&. 
.SS "bool Handler::write_visible () const\fC [inline]\fP"

.PP
Test if this is a public write handler\&. Private handlers may not be called from outside the router configuration\&. Handlers are public by default; to make a write handler private, add the f_write_private flag\&. 
.SS "bool Handler::visible () const\fC [inline]\fP"

.PP
Test if this is a public read or write handler\&. 
.SS "bool Handler::allow_concurrent_handlers () const\fC [inline]\fP"

.PP
Test if this handler can execute concurrently with other handlers\&. 
.SS "bool Handler::allow_concurrent_threads () const\fC [inline]\fP"

.PP
Test if this handler can execute concurrently with router threads\&. 
.SS "bool Handler::raw () const\fC [inline]\fP"

.PP
Test if spaces should be preserved when calling this handler\&. Some Click drivers perform some convenience processing on handler values, for example by removing a terminating newline from write handler values or adding a terminating newline to read handler values\&. Raw handlers do not have their values manipulated in this way\&. Rawness is set by the f_raw flag\&.
.PP
.PD 0
.IP "\(bu" 2
The linuxmodule driver adds a terminating newline to non-raw read handler values, but does not modify raw read handlers' values in any way\&. 
.IP "\(bu" 2
The same applies to handler values returned by the userlevel driver's \fC-h\fP option\&. 
.IP "\(bu" 2
The linuxmodule driver removes an optional terminating newline from a one-line non-raw write handler value, but does not modify raw write handlers' values in any way\&. 
.PP

.SS "\fBString\fP Handler::call_read (\fBElement\fP * e, const \fBString\fP & param, \fBErrorHandler\fP * errh) const"

.PP
Call a read handler, possibly with parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP element on which to call the handler 
.br
\fIparam\fP parameters, or an empty string if no parameters 
.br
\fIerrh\fP optional error handler
.RE
.PP
The element must be nonnull; to call a global handler, pass the relevant router's \fBRouter::root_element()\fP\&. \fIerrh\fP may be null, in which case errors are reported to \fBErrorHandler::silent_handler()\fP\&. 
.SS "\fBString\fP Handler::call_read (\fBElement\fP * e, \fBErrorHandler\fP * errh = \fC0\fP) const\fC [inline]\fP"

.PP
Call a read handler without parameters\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP element on which to call the handler 
.br
\fIerrh\fP error handler
.RE
.PP
The element must be nonnull; to call a global handler, pass the relevant router's \fBRouter::root_element()\fP\&. \fIerrh\fP may be null, in which case errors are ignored\&. 
.SS "int Handler::call_write (const \fBString\fP & value, \fBElement\fP * e, \fBErrorHandler\fP * errh) const"

.PP
Call a write handler\&. 
.PP
\fBParameters:\fP
.RS 4
\fIvalue\fP value to write to the handler 
.br
\fIe\fP element on which to call the handler 
.br
\fIerrh\fP optional error handler
.RE
.PP
The element must be nonnull; to call a global handler, pass the relevant router's \fBRouter::root_element()\fP\&. \fIerrh\fP may be null, in which case errors are reported to \fBErrorHandler::silent_handler()\fP\&. 
.SS "\fBString\fP Handler::unparse_name (\fBElement\fP * e) const"

.PP
Unparse this handler's name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP relevant element
.RE
.PP
If \fIe\fP is an actual element, then returns 'ENAME\&.HNAME', where ENAME is \fIe's\fP \fBname\fP and HNAME is this handler's \fBname()\fP\&. Otherwise, just returns \fBname()\fP\&. 
.SS "\fBString\fP Handler::unparse_name (\fBElement\fP * e, const \fBString\fP & hname)\fC [static]\fP"

.PP
Unparse a handler name\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP relevant element, if any 
.br
\fIhname\fP handler name
.RE
.PP
If \fIe\fP is an actual element on some router, then returns 'ENAME\&.hname', where ENAME is \fIe's\fP \fBname\fP\&. Otherwise, just returns \fIhname\fP\&. 
.SS "static const \fBHandler\fP* Handler::blank_handler ()\fC [inline]\fP, \fC [static]\fP"

.PP
Returns a handler incapable of doing anything\&. The returned handler returns false for \fBreadable()\fP and \fBwritable()\fP and has \fBflags()\fP of zero\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Click from the source code\&.

.TH "RouterVisitor" 3 "Thu Oct 12 2017" "Click" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RouterVisitor \- Base class for router configuration visitors\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <routervisitor\&.hh>\fP
.PP
Inherited by \fBElementTracker\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRouterVisitor\fP ()"
.br
.RI "\fIConstruct an \fBRouterVisitor\fP\&. \fP"
.ti -1c
.RI "virtual \fB~RouterVisitor\fP ()"
.br
.RI "\fIDestroy an \fBRouterVisitor\fP\&. \fP"
.ti -1c
.RI "virtual bool \fBvisit\fP (\fBElement\fP *e, bool isoutput, int port, \fBElement\fP *from_e, int from_port, int distance)"
.br
.RI "\fIVisit an element\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Base class for router configuration visitors\&. 

\fBRouterVisitor\fP objects are used to traverse the router configuration graph\&. They are usually passed to the \fBRouter::visit_downstream()\fP and \fBRouter::visit_upstream()\fP functions\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "RouterVisitor::RouterVisitor ()\fC [inline]\fP"

.PP
Construct an \fBRouterVisitor\fP\&. 
.SS "virtual RouterVisitor::~RouterVisitor ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Destroy an \fBRouterVisitor\fP\&. 
.SH "Member Function Documentation"
.PP 
.SS "bool RouterVisitor::visit (\fBElement\fP * e, bool isoutput, int port, \fBElement\fP * from_e, int from_port, int distance)\fC [virtual]\fP"

.PP
Visit an element\&. 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP element being visited 
.br
\fIisoutput\fP true for output ports, false for input ports 
.br
\fIport\fP port number being visited 
.br
\fIfrom_e\fP element by which \fIe\fP was reached 
.br
\fIfrom_port\fP port by which \fIe/\fIport\fP was\fP reached 
.br
\fIdistance\fP connection distance in breadth-first search 
.RE
.PP
\fBReturns:\fP
.RS 4
true to continue traversing, false to stop
.RE
.PP
A \fBRouter\fP configuration traversal calls this function once on each reached port\&. Configuration traversal is breadth-first; \fIdistance\fP is the minimum connection distance from the traversal's start point to \fIe/\fIport\fP\&.\fP A traversal will call a port's \fBvisit()\fP function at most once\&. \fIfrom_e\fP and \fIfrom_port\fP specify one port that is connected to \fIe\fP and \fIport\fP (there may be more than one)\&. If \fIisoutput\fP is true, then \fIe/\fIport\fP is\fP an output port and \fIfrom_e/\fIfrom_port\fP is\fP an input port; if \fIisoutput\fP is false, the opposite holds\&.
.PP
The return value specifies whether traversal should continue through the \fIe\fP element\&. If it is true, then the traversal will continue based on \fIe's\fP packet flow specifier, via ports that connect to \fIe/\fIport\fP \fP(see \fBElement::flow_code()\fP for more)\&.
.PP
The default implementation always returns true\&. 
.PP
Reimplemented in \fBElementNeighborhoodTracker\fP, and \fBElementCastTracker\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Click from the source code\&.

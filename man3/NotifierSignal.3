.TH "NotifierSignal" 3 "Thu Oct 12 2017" "Click" \" -*- nroff -*-
.ad l
.nh
.SH NAME
NotifierSignal \- An activity signal\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef bool(NotifierSignal::* \fBunspecified_bool_type\fP) () const "
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBNotifierSignal\fP ()"
.br
.RI "\fIConstruct a busy signal\&. \fP"
.ti -1c
.RI "\fBNotifierSignal\fP (\fBatomic_uint32_t\fP *value, uint32_t mask)"
.br
.RI "\fIConstruct an activity signal\&. \fP"
.ti -1c
.RI "\fBNotifierSignal\fP (const \fBNotifierSignal\fP &x)"
.br
.RI "\fICopy construct a signal\&. \fP"
.ti -1c
.RI "\fB~NotifierSignal\fP ()"
.br
.RI "\fIDestroy a signal\&. \fP"
.ti -1c
.RI "bool \fBactive\fP () const "
.br
.RI "\fITest if the signal is active\&. \fP"
.ti -1c
.RI "\fBoperator unspecified_bool_type\fP () const "
.br
.RI "\fITest if the signal is active\&. \fP"
.ti -1c
.RI "bool \fBset_active\fP (bool \fBactive\fP)"
.br
.RI "\fISet whether the basic signal is active\&. \fP"
.ti -1c
.RI "bool \fBidle\fP () const "
.br
.RI "\fITest if the signal is idle\&. \fP"
.ti -1c
.RI "bool \fBbusy\fP () const "
.br
.RI "\fITest if the signal is busy\&. \fP"
.ti -1c
.RI "bool \fBoverderived\fP () const "
.br
.RI "\fITest if the signal is overderived\&. \fP"
.ti -1c
.RI "bool \fBinitialized\fP () const "
.br
.RI "\fITest if the signal is initialized\&. \fP"
.ti -1c
.RI "\fBNotifierSignal\fP & \fBoperator=\fP (const \fBNotifierSignal\fP &x)"
.br
.RI "\fIAssign a signal\&. \fP"
.ti -1c
.RI "\fBNotifierSignal\fP & \fBoperator+=\fP (const \fBNotifierSignal\fP &x)"
.br
.RI "\fIMake this signal derived by adding information from \fIx\fP\&. \fP"
.ti -1c
.RI "void \fBswap\fP (\fBNotifierSignal\fP &x)"
.br
.RI "\fIExchange the values of this signal and \fIx\fP\&. \fP"
.ti -1c
.RI "\fBString\fP \fBunparse\fP (\fBRouter\fP *router) const "
.br
.RI "\fIReturn a human-readable representation of the signal\&. \fP"
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBNotifierSignal\fP \fBidle_signal\fP ()"
.br
.RI "\fIReturn an idle signal\&. \fP"
.ti -1c
.RI "static \fBNotifierSignal\fP \fBbusy_signal\fP ()"
.br
.RI "\fIReturn a busy signal\&. \fP"
.ti -1c
.RI "static \fBNotifierSignal\fP \fBoverderived_signal\fP ()"
.br
.RI "\fIReturn an overderived busy signal\&. \fP"
.ti -1c
.RI "static \fBNotifierSignal\fP \fBuninitialized_signal\fP ()"
.br
.RI "\fIReturn an uninitialized signal\&. \fP"
.ti -1c
.RI "static void \fBstatic_initialize\fP ()"
.br
.RI "\fIInitialize the \fBNotifierSignal\fP implementation\&. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (const \fBNotifierSignal\fP &a, const \fBNotifierSignal\fP &b)"
.br
.RI "\fITest if two NotifierSignals are equal\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBNotifierSignal\fP &a, const \fBNotifierSignal\fP &b)"
.br
.RI "\fITest if two NotifierSignals are unequal\&. \fP"
.ti -1c
.RI "\fBNotifierSignal\fP \fBoperator+\fP (\fBNotifierSignal\fP a, const \fBNotifierSignal\fP &b)"
.br
.RI "\fIReturn a derived signal\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
An activity signal\&. 

Activity signals in Click let one element determine whether another element is active\&. For example, consider an element \fIX\fP pulling from a \fIQueue\fP\&. If the \fIQueue\fP is empty, there's no point in \fIX\fP trying to pull from it\&. Thus, the \fIQueue\fP has an activity signal that's active when it contains packets and inactive when it's empty\&. \fIX\fP can check the activity signal before pulling, and do something else if it's inactive\&. Combined with the sleep/wakeup functionality of \fBActiveNotifier\fP, this can greatly reduce CPU load due to polling\&.
.PP
A 'basic activity signal' is essentially a bit that's either on or off\&. When it's on, the signal is active\&. \fBNotifierSignal\fP can represent \fIderived\fP activity signals as well\&. A derived signal combines information about \fIN\fP basic signals using the following invariant: If any of the basic signals is active, then the derived signal is also active\&. There are no other guarantees; in particular, the derived signal might be active even if \fInone\fP of the basic signals are active\&.
.PP
Click elements construct \fBNotifierSignal\fP objects in four ways:
.PP
.IP "\(bu" 2
\fBidle_signal()\fP returns a signal that's never active\&.
.IP "\(bu" 2
\fBbusy_signal()\fP returns a signal that's always active\&.
.IP "\(bu" 2
\fBRouter::new_notifier_signal()\fP creates a new basic signal\&. This method should be preferred to \fBNotifierSignal\fP's own constructors\&.
.IP "\(bu" 2
\fBoperator+(NotifierSignal, const NotifierSignal &)\fP creates a derived signal\&. 
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "NotifierSignal::NotifierSignal ()\fC [inline]\fP"

.PP
Construct a busy signal\&. The returned signal is always active\&. 
.SS "NotifierSignal::NotifierSignal (\fBatomic_uint32_t\fP * value, uint32_t mask)\fC [inline]\fP"

.PP
Construct an activity signal\&. Elements should not use this constructor directly\&. 
.PP
\fBSee also:\fP
.RS 4
\fBRouter::new_notifier_signal\fP 
.RE
.PP

.SS "NotifierSignal::NotifierSignal (const \fBNotifierSignal\fP & x)\fC [inline]\fP"

.PP
Copy construct a signal\&. 
.SS "NotifierSignal::~NotifierSignal ()\fC [inline]\fP"

.PP
Destroy a signal\&. 
.SH "Member Function Documentation"
.PP 
.SS "\fBNotifierSignal\fP NotifierSignal::idle_signal ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return an idle signal\&. The returned signal is never active\&. 
.SS "\fBNotifierSignal\fP NotifierSignal::busy_signal ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return a busy signal\&. The returned signal is always active\&. 
.SS "\fBNotifierSignal\fP NotifierSignal::overderived_signal ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return an overderived busy signal\&. Overderived signals replace derived signals that are too complex to represent\&. An overderived signal, like a busy signal, is always active\&. 
.SS "\fBNotifierSignal\fP NotifierSignal::uninitialized_signal ()\fC [inline]\fP, \fC [static]\fP"

.PP
Return an uninitialized signal\&. Uninitialized signals may be used occasionally as placeholders for true signals to be added later\&. Uninitialized signals are never active\&. 
.SS "bool NotifierSignal::active () const\fC [inline]\fP"

.PP
Test if the signal is active\&. 
.SS "NotifierSignal::operator unspecified_bool_type () const\fC [inline]\fP"

.PP
Test if the signal is active\&. 
.SS "bool NotifierSignal::set_active (bool active)\fC [inline]\fP"

.PP
Set whether the basic signal is active\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactive\fP true iff the basic signal is active 
.RE
.PP
\fBReturns:\fP
.RS 4
previous active state
.RE
.PP
Use this function to set whether a basic signal is active\&.
.PP
It is illegal to call \fBset_active()\fP on derived, idle, busy, or overderived signals\&. Some of these actions may cause an assertion failure\&. 
.SS "bool NotifierSignal::idle () const\fC [inline]\fP"

.PP
Test if the signal is idle\&. 
.PP
\fBReturns:\fP
.RS 4
true iff the signal is idle, i\&.e\&. it will never be active\&. 
.RE
.PP

.SS "bool NotifierSignal::busy () const\fC [inline]\fP"

.PP
Test if the signal is busy\&. 
.PP
\fBReturns:\fP
.RS 4
true iff the signal is busy, i\&.e\&. it will always be active\&.
.RE
.PP
\fBNote:\fP
.RS 4
An \fBoverderived_signal()\fP is \fBbusy()\fP, but a \fBbusy_signal()\fP is not \fBoverderived()\fP\&. 
.RE
.PP

.SS "bool NotifierSignal::overderived () const\fC [inline]\fP"

.PP
Test if the signal is overderived\&. 
.PP
\fBReturns:\fP
.RS 4
true iff the signal equals \fBoverderived_signal()\fP\&.
.RE
.PP
\fBNote:\fP
.RS 4
An \fBoverderived_signal()\fP is \fBbusy()\fP, but a \fBbusy_signal()\fP is not \fBoverderived()\fP\&. 
.RE
.PP

.SS "bool NotifierSignal::initialized () const\fC [inline]\fP"

.PP
Test if the signal is initialized\&. 
.PP
\fBReturns:\fP
.RS 4
true iff the signal doesn't equal \fBuninitialized_signal()\fP\&. 
.RE
.PP

.SS "\fBNotifierSignal\fP & NotifierSignal::operator= (const \fBNotifierSignal\fP & x)\fC [inline]\fP"

.PP
Assign a signal\&. 
.SS "\fBNotifierSignal\fP & NotifierSignal::operator+= (const \fBNotifierSignal\fP & x)"

.PP
Make this signal derived by adding information from \fIx\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP the signal to add
.RE
.PP
Creates a derived signal that combines information from this signal and \fIx\fP\&. Equivalent to '*this = (*this + @a x)'\&.
.PP
\fBSee also:\fP
.RS 4
\fBoperator+(NotifierSignal, const NotifierSignal&)\fP 
.RE
.PP

.SS "void NotifierSignal::swap (\fBNotifierSignal\fP & x)\fC [inline]\fP"

.PP
Exchange the values of this signal and \fIx\fP\&. 
.SS "\fBString\fP NotifierSignal::unparse (\fBRouter\fP * router) const"

.PP
Return a human-readable representation of the signal\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrouter\fP the relevant router or null
.RE
.PP
Useful for signal debugging\&. 
.SS "void NotifierSignal::static_initialize ()\fC [static]\fP"

.PP
Initialize the \fBNotifierSignal\fP implementation\&. This function must be called before \fBNotifierSignal\fP functionality is used\&. It is safe to call it multiple times\&.
.PP
\fBNote:\fP
.RS 4
Elements don't need to worry about \fBstatic_initialize()\fP; Click drivers have already called it for you\&. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "bool operator== (const \fBNotifierSignal\fP & a, const \fBNotifierSignal\fP & b)\fC [friend]\fP"

.PP
Test if two NotifierSignals are equal\&. Returns true iff the two NotifierSignals are the same -- i\&.e\&., they combine information about exactly the same sets of basic signals\&.
.PP
All \fBidle()\fP signals compare equal\&. \fBbusy_signal()\fP and \fBoverderived_signal()\fP do not compare equal, however\&. 
.SS "bool operator!= (const \fBNotifierSignal\fP & a, const \fBNotifierSignal\fP & b)\fC [friend]\fP"

.PP
Test if two NotifierSignals are unequal\&. Returns true iff !(\fIa\fP == \fIb\fP)\&. 
.SS "\fBNotifierSignal\fP operator+ (\fBNotifierSignal\fP a, const \fBNotifierSignal\fP & b)\fC [friend]\fP"

.PP
Return a derived signal\&. Returns a derived signal that combines information from its arguments\&. The result will be active whenever \fIa\fP and/or \fIb\fP is active\&. If the combination of \fIa\fP and \fIb\fP is too complex to represent, returns an overderived signal; this trivially follows the invariant since it is always active\&.
.PP
Signal derivation is commutative and associative\&. The following special combinations are worth remembering:
.PP
.IP "\(bu" 2
An uninitialized signal plus any other signal is uninitialized\&.
.IP "\(bu" 2
An idle signal plus any signal \fIa\fP equals \fIa\fP\&.
.IP "\(bu" 2
A busy signal plus any other initialized signal is busy\&.
.IP "\(bu" 2
\fBoverderived_signal()\fP plus \fBbusy_signal()\fP equals \fBbusy_signal()\fP\&.
.PP
.PP
\fBSee also:\fP
.RS 4
\fBNotifierSignal::operator+=\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Click from the source code\&.

.TH "xsocket/Xrecv.c" 3 "Fri Mar 3 2017" "Version 2.0" "XSocket API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xsocket/Xrecv.c \- \fBXrecv()\fP, \fBXrecvfrom()\fP - receive a message from a socket\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'Xsocket\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBXrecv\fP (int sockfd, void *rbuf, size_t len, int flags)"
.br
.RI "\fIReceive data from an Xsocket\&. \fP"
.ti -1c
.RI "int \fBXrecvfrom\fP (int sockfd, void *rbuf, size_t len, int flags, struct sockaddr *addr, socklen_t *addrlen)"
.br
.RI "\fIreceives datagram data on an Xsocket \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "int Xrecv (int sockfd, void * rbuf, size_t len, int flags)"
The \fBXrecv()\fP call is used to receive messages from a connected Xsocket\&.
.PP
If no data is available at the socket, \fBXrecv()\fP will wait for a message to arrive, unless the socket is nonblocking (see \fBXfcntl()\fP), in which case the value -1 is returned and errno is set to EAGAIN or EWOULDBLOCK\&. This call will return any data available, up to the requested amount, rather than waiting for receipt of the full amount requested\&.
.PP
An application can use \fBXselect()\fP or \fBXpoll()\fP, or to determine when more data arrives on a socket\&.
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP The socket to receive with 
.br
\fIrbuf\fP where to put the received data 
.br
\fIlen\fP maximum amount of data to receive\&. the amount of data returned may be less than len bytes\&. 
.br
\fIflags\fP (This is not currently used but is kept to be compatible with the standard send socket call)\&.
.RE
.PP
\fBReturns:\fP
.RS 4
the number of bytes returned, which may be less than the number requested by the caller 
.PP
-1 on failure with errno set to an error compatible with the standard recv call\&. 
.RE
.PP

.SS "int Xrecvfrom (int sockfd, void * rbuf, size_t len, int flags, struct sockaddr * addr, socklen_t * addrlen)"
\fBXrecvfrom()\fP retrieves data from an Xsocket of type XSOCK_DGRAM\&. Unlike the standard recvfrom API, it will not work with sockets of type XSOCK_STREAM\&.
.PP
If no data is available at the socket, \fBXrecvfrom()\fP will wait for a message to arrive, unless the socket is nonblocking (see \fBXfcntl()\fP), in which case the value -1 is returned and errno is set to EAGAIN or EWOULDBLOCK\&. This return any data available, up to the requested amount, rather than waiting for receipt of the full amount requested\&.
.PP
An application can use \fBXselect()\fP or \fBXpoll()\fP, or to determine when more data arrives on a socket\&.
.PP
\fBParameters:\fP
.RS 4
\fIsockfd\fP The socket to receive with 
.br
\fIrbuf\fP where to put the received data 
.br
\fIlen\fP maximum amount of data to receive\&. The amount of data returned may be less than len bytes\&. 
.br
\fIflags\fP (This is not currently used but is kept to be compatible with the standard sendto socket call\&. 
.br
\fIaddr\fP if non-NULL, filled with the address of the sender on success 
.br
\fIaddrlen\fP contians the size of addr when called, replaced with the length of the received addr on return\&. addrlen MUST be set to the size of addr before calling \fBXrecvfrom()\fP when addr is non-NULL\&. If addrlen is smaller than the length of the source DAG, the returned address is truncated and addrlen will contain length of the actual address\&.
.RE
.PP
\fBReturns:\fP
.RS 4
number of bytes returned 
.PP
-1 on failure with errno set\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for XSocket API from the source code\&.
